Backlog:

== DB ==
 + sorting (on js site)
 - filters

 == Frontend ==
  JQuery: make page dynamic
  +  do not reload whole page on like
  +  do not reload whole page on evaluation
  +  do not reload whole page on sorting
  +  do not reload whole page when removing
  +  evaluate by hovering over stars
  + add logout
  + bootstrap log-in form / make log-in page nicer


== Backend ==
+ make basic authentication
+ user can only evaluate/like and only once.
+ remove 'likes' from meals
+ create account
?- guest (now, create account is kinda guest)
 
== General ==
+ stats on meal (on DB site. for example, consider where to store it. Separate table with joining on id?)
+ show stats (in new window? or just next to the chosen meal? Mb do something and then decide what's more convenient
?- show just your evaluations/preferences // not necessary, mb add to filter (eye) in the next version
+ find out how to get initial data. means read the initial html? or they have website? // yet parsing html, need to do it just once.

- add image?
 
== Algorithms ==
+ populate with random data (10 different ppl have random distribution over meals)
- implement similarity rating (means this guy have similar taste, and this one is not)
            suggestions/estimated value on unrated meal

== Security ==
?- avoid injections on admin site // need to think more about it. Yet, no problems spotted.
+ acc protection (hashed password, email verification)


== May be impossible ==
- order from web-interface.
- keep track of your orderings (stats : money spent, calories intake, bla-bla )


============ Deploy ==================
+ deploy app to web server
+ test in real environment

== Design ==
?-Create expand on scroll ?? not yet relevant, unless have a huge amount of data


++++++++++++++++++++++ misc
Choose DB framework  -> SORM  -> Slick       /   Anorm ans Slick are also worth knowing, but SORM is simplest anyway
Choose DB engine  -> SQL? / H2  -> H2 for now
Choose web server  -> Google Application Engine


